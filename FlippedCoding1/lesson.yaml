- Class: meta
  Course: STEP0020
  Lesson: Flipped Coding 1 - foundations for vectors, logical and subsetting
  Author: Michael Veale & Ine Steenmans
  Type: Standard
  Organization: UCL STEaPP (includes GNU content from https://github.com/swirldev/swirl_courses. Distributed GNU GPL v3)
  Version: 2

- Class: text
  Output: "Hi everyone! Welcome to the first flipped coding activity for our analysis module. Good work installing this package. We're going to be primarily learning R within R, which is pretty cool. Once you've completed it, you'll need to take a screenshot and paste it in the Moodle forum. Whenever you're ready, press Enter to continue."

- Class: cmd_question
  Output: "In its simplest form, R can be used as an interactive calculator. Type 5 + 7 in the Console and press Enter."
  CorrectAnswer: 5 + 7
  AnswerTests: omnitest(correctExpr='5 + 7')
  Hint: "Type 5 + 7 and press Enter."

- Class: text
  Output: "R simply prints the result of 12 by default. However, R is a programming language and often the reason we use a programming language as opposed to a calculator is to automate some process or avoid unnecessary repetition."

- Class: text
  Output: "In this case, we may want to use our result from above in a second calculation. Instead of retyping 5 + 7 every time we need it, we can just create a new variable that stores the result."

- Class: text
  Output: "The way you assign a value to a variable in R is by using the assignment operator, which is just a less than symbol followed by a minus sign. It looks like this: <-"

- Class: text
  Output: "Think of the assignment operator as an arrow. You are assigning the value on the right side of the arrow to the variable name on the left side of the arrow."

- Class: cmd_question
  Output: "To assign the result of 5 + 7 to a new variable called x, you type x <- 5 + 7. This can be read as 'x is 5 plus 7'. Give it a try now."
  CorrectAnswer: x <- 5 + 7
  AnswerTests: any_of_exprs('x <- 5 + 7', 'x <- 7 + 5')
  Hint: "Type x <- 5 + 7. Include a single space on each side of the assignment operator, but do NOT put a space between < and -."

- Class: cmd_question
  Output: "To view the contents of the variable x, just type x and press Enter."
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: "Type x and press Enter. This will print the value of x."

- Class: cmd_question
  Output: "Now, store the result of x - 3 in a new variable called y."
  CorrectAnswer: y <- x - 3
  AnswerTests: omnitest(correctExpr='y <- x - 3')
  Hint: "Type y <- x - 3 and press Enter."

- Class: cmd_question
  Output: "What is the value of y? Type y to find out."
  CorrectAnswer: y
  AnswerTests: omnitest(correctExpr='y')
  Hint: "Type y and press Enter."

- Class: text
  Output: "The real power in R is to manipulate lots of numbers at once. So let's create a small collection of numbers called a vector. Any object that contains data such as numbers is called a data structure, and numeric vectors are the simplest type of data structure in R."

- Class: cmd_question
  Output: "The easiest way to create a vector is with the c() function, which stands for concatenate or combine. To create a vector containing the numbers 1.1, 9, and 3.14, type c(1.1, 9, 3.14). Try it now and store the result in a variable called z."
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  Hint: "Type z <- c(1.1, 9, 3.14)."

- Class: cmd_question
  Output: "Anytime you have questions about a particular function, you can access R's built-in help files via the ? command. For example, if you want more information on the c() function, type ?c. Give it a try."
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: "Type ?c and press Enter."

- Class: cmd_question
  Output: "You can combine vectors to make a new vector. Create a new vector that contains z, 555, then z again in that order. Do not assign this vector to a variable."
  CorrectAnswer: c(z, 555, z)
  AnswerTests: omnitest(correctExpr='c(z, 555, z)')
  Hint: "Type c(z, 555, z)."

- Class: cmd_question
  Output: "Numeric vectors can be used in arithmetic expressions. Type z * 2 + 100."
  CorrectAnswer: z * 2 + 100
  AnswerTests: omnitest(correctExpr='z * 2 + 100')
  Hint: "Type z * 2 + 100 without assigning the result."

- Class: cmd_question
  Output: "Take the square root of z - 1 and assign it to a new variable called my_sqrt."
  CorrectAnswer: my_sqrt <- sqrt(z - 1)
  AnswerTests: omnitest(correctExpr='my_sqrt <- sqrt(z - 1)')
  Hint: "Type my_sqrt <- sqrt(z - 1)."

- Class: mult_question
  Output: "Before we view my_sqrt, what do you think it contains?"
  CorrectAnswer: a vector of length 3
  AnswerChoices: "a vector of length 3; a single number (vector of length 1); a vector of length 0"
  AnswerTests: omnitest(correctVal='a vector of length 3')
  Hint: "Think about vectorised operations."

- Class: cmd_question
  Output: "Print my_sqrt."
  CorrectAnswer: my_sqrt
  AnswerTests: omnitest(correctExpr='my_sqrt')
  Hint: "Type my_sqrt and press Enter."

- Class: cmd_question
  Output: "Now, create a new variable called my_div that gets the value of z divided by my_sqrt."
  CorrectAnswer: my_div <- z / my_sqrt
  AnswerTests: omnitest(correctExpr='my_div <- z / my_sqrt')
  Hint: "Type my_div <- z / my_sqrt."

- Class: mult_question
  Output: "Which statement do you think is true?"
  CorrectAnswer: "The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on..."
  AnswerChoices: "The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on...; my_div is a single number; my_div is undefined"
  AnswerTests: omnitest(correctVal='The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on...')
  Hint: "Think about how R handles vectorised operations."

- Class: cmd_question
  Output: "Go ahead and print the contents of my_div."
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: "Type my_div and press Enter."

- Class: text
  Output: "When given two vectors of the same length, R performs arithmetic element-by-element. If the vectors are of different lengths, R recycles the shorter vector until it matches the longer one."

- Class: cmd_question
  Output: "To see another example of how this recycling works, try adding c(1, 2, 3, 4) and c(0, 10)."
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10)')
  Hint: "Type c(1, 2, 3, 4) + c(0, 10)."

- Class: cmd_question
  Output: "Try c(1, 2, 3, 4) + c(0, 10, 100) for an example where lengths don't divide evenly."
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10, 100)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10, 100)')
  Hint: "Type c(1, 2, 3, 4) + c(0, 10, 100)."

- Class: text
  Output: "Now let's look at a couple of time-saving tricks."

- Class: cmd_question
  Output: "In many programming environments, the up arrow cycles through previous commands. Try hitting the up arrow until you reach z * 2 + 100, then change 100 to 1000 and press Enter. If the up arrow doesn't work, just type the corrected command."
  CorrectAnswer: z * 2 + 1000
  AnswerTests: omnitest(correctExpr='z * 2 + 1000')
  Hint: "If the up arrow feature doesn't work, type the corrected command."

- Class: cmd_question
  Output: "To view the contents of a variable you might have forgotten the name of, type the first few letters and press Tab to use auto-completion. Try typing my_div and pressing Enter."
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: "If auto-completion doesn't work, type my_div manually."

- Class: text
  Output: "So, c() is an easy way to create a vector, but it's not the only way. Sometimes we want to make sequences of numbers."

- Class: cmd_question
  Output: "The simplest way to create a sequence of numbers in R is with the : operator. Type 1:20 to see how it works."
  CorrectAnswer: 1:20
  AnswerTests: omnitest(correctExpr='1:20')
  Hint: "Type 1:20 with no spaces."

- Class: cmd_question
  Output: "What happens if we do 15:1? Try it."
  CorrectAnswer: 15:1
  AnswerTests: omnitest(correctExpr='15:1')
  Hint: "Type 15:1 and press Enter."

- Class: cmd_question
  Output: "Store the vector 1:15 in a new variable a."
  CorrectAnswer: a <- 1:15
  AnswerTests: omnitest(correctExpr='a <- 1:15')
  Hint: "Type a <- 1:15."

- Class: cmd_question
  Output: "The seq() function allows more control over sequences. Try seq(1, 20)."
  CorrectAnswer: seq(1, 20)
  AnswerTests: omnitest(correctExpr='seq(1, 20)')
  Hint: "Type seq(1, 20)."

- Class: cmd_question
  Output: "Now try seq(0, 10, by=0.5)."
  CorrectAnswer: seq(0, 10, by=0.5)
  AnswerTests: omnitest(correctExpr='seq(0, 10, by=0.5)')
  Hint: "Type seq(0, 10, by=0.5)."

- Class: cmd_question
  Output: "Generate a vector of 30 numbers between 5 and 10 using seq(5, 10, length=30) and store it as my_seq."
  CorrectAnswer: my_seq <- seq(5, 10, length=30)
  AnswerTests: omnitest(correctExpr='my_seq <- seq(5, 10, length=30)')
  Hint: "Type my_seq <- seq(5, 10, length=30)."

- Class: cmd_question
  Output: "Confirm the length of my_seq using length(my_seq)."
  CorrectAnswer: length(my_seq)
  AnswerTests: omnitest(correctExpr='length(my_seq)')
  Hint: "Type length(my_seq)."

- Class: cmd_question
  Output: "Generate a vector 1:length(my_seq)."
  CorrectAnswer: 1:length(my_seq)
  AnswerTests: omnitest(correctExpr='1:length(my_seq)')
  Hint: "Type 1:length(my_seq)."

- Class: cmd_question
  Output: "Create a vector of 40 zeros using rep(0, times = 40)."
  CorrectAnswer: rep(0, times = 40)
  AnswerTests: omnitest(correctExpr='rep(0, times = 40)')
  Hint: "Type rep(0, times = 40)."

- Class: cmd_question
  Output: "Now create rep(c(0, 1, 2), each = 10)."
  CorrectAnswer: rep(c(0, 1, 2), each = 10)
  AnswerTests: omnitest(correctExpr='rep(c(0, 1, 2), each = 10)')
  Hint: "Type rep(c(0, 1, 2), each = 10)."

- Class: figure
  Output: "This lesson is complete! Before leaving, generate your completion code with your UCL student number and post it in Moodle."
  Figure: finalcode.R
  FigureType: new

- Class: cmd_question
  Output: "Type completioncode(YOUR_8_DIGIT_NUMBER). Example: completioncode(1007893)."
  CorrectAnswer: completioncode(12345678)
  AnswerTests: expr_uses_func("completioncode")
  Hint: "Replace 12345678 with your own 8-digit student number, for example completioncode(1XXXXXXX)."

- Class: text
  Output: "Copy your code and paste it in Moodle under 'Pre-session 4'."

- Class: text
  Output: "If Moodle asks for a screenshot, include the console line showing completioncode(YOURNUMBER) and the printed code."

- Class: text
  Output: "Saving and exiting: type bye() to exit and save your progress. To return to the main menu (without exiting R), type main(). You can experiment with play() and resume with nxt(). Your code remains valid once generated."
