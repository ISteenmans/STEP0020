- Class: meta
  Course: STEP0020
  Lesson: Flipped Coding 2
  Author: Ine Steenmans & Michael Veale
  Type: Standard
  Organization: UCL STEaPP (includes GNU content from https://github.com/swirldev/swirl_courses. Distributed GNU GPL v3)
  Version: 2

- Class: text
  Output: "In this lesson, you'll learn more about how to manipulate data using dplyr. dplyr is a fast and powerful R package written by Hadley Wickham and Romain Francois that provides a consistent and concise grammar for manipulating tabular data."

- Class: text
  Output: "We're going to be working with a dataset of flights in New York in 2013. I've loaded it for you already."

- Class: cmd_question
  Output: "You can see it by typing flights at the command line."
  CorrectAnswer: flights
  AnswerTests: omnitest(correctExpr='flights')
  Hint: "Type flights at the command line."

- Class: cmd_question
  Output: "Use dim() to look at the dimensions of flights."
  CorrectAnswer: dim(flights)
  AnswerTests: omnitest(correctExpr='dim(flights)')
  Hint: "dim(flights) will give you the dimensions of the dataset."

- Class: cmd_question
  Output: "Now use head() to preview the data."
  CorrectAnswer: head(flights)
  AnswerTests: omnitest(correctExpr='head(flights)')
  Hint: "head(flights) will show you the first six rows."

- Class: cmd_question
  Output: "And tail() to show you the end."
  CorrectAnswer: tail(flights)
  AnswerTests: omnitest(correctExpr='tail(flights)')
  Hint: "tail(flights) will show you the last six rows."

- Class: cmd_question
  Output: "The dplyr package was automatically installed (if necessary) and loaded at the beginning of this lesson. Normally, this is something you would have to do on your own. Just to build the habit, type library(dplyr) now to load the package again."
  CorrectAnswer: library(dplyr)
  AnswerTests: omnitest(correctExpr='library(dplyr)')
  Hint: "Use library(dplyr) to load the dplyr package."

- Class: text
  Output: "According to the Introduction to dplyr vignette written by the package authors, the dplyr philosophy is to have small functions that each do one thing well. Specifically, dplyr supplies five verbs that cover most fundamental data manipulation tasks: select(), filter(), arrange(), mutate(), and summarize()."

- Class: cmd_question
  Output: "Use ?select to pull up the documentation for the first of these core functions."
  CorrectAnswer: ?select
  AnswerTests: omnitest(correctExpr='?select')
  Hint: "?select will display the documentation for dplyr's select() function."

- Class: text
  Output: "Help files for the other functions are accessible in the same way."

- Class: cmd_question
  Output: "As may often be the case, particularly with larger datasets, we are only interested in some of the variables. Maybe we want to know more about delays per day. Use select(flights, year, month, day, dep_delay) to select only those variables."
  CorrectAnswer: select(flights, year, month, day, dep_delay)
  AnswerTests: omnitest(correctExpr='select(flights, year, month, day, dep_delay)')
  Hint: "Type select(flights, year, month, day, dep_delay)."

- Class: text
  Output: "You might remember seeing the $ sign in class. This is used to pull a vector out from a data frame. When you're using dplyr verbs, dplyr remembers the data frame you are using, so you don't need flights$ each time before the variable name."

- Class: text
  Output: "Also, note that the columns are returned in the order you specified."

- Class: cmd_question
  Output: "Recall that in R, the : operator provides a compact notation for creating a sequence of numbers. For example, try 5:20."
  CorrectAnswer: 5:20
  AnswerTests: omnitest(correctExpr='5:20')
  Hint: "Type 5:20 to see how : can be used to create a sequence of numbers."

- Class: cmd_question
  Output: "Normally this notation is reserved for numbers, but select() allows you to specify a sequence of columns this way, which can save typing. Use select(flights, year:dep_delay) to select all columns starting from year and ending with dep_delay."
  CorrectAnswer: select(flights, year:dep_delay)
  AnswerTests: omnitest(correctExpr='select(flights, year:dep_delay)')
  Hint: "select(flights, year:dep_delay) will select all columns from year to dep_delay (left to right)."

- Class: cmd_question
  Output: "We can also select the same columns in reverse order. Give it a try."
  CorrectAnswer: select(flights, dep_delay:year)
  AnswerTests: omnitest(correctExpr='select(flights, dep_delay:year)')
  Hint: "Try select(flights, dep_delay:year)."

- Class: cmd_question
  Output: "Print the entire dataset again to remind yourself what it looks like. You can do this at any time during the lesson."
  CorrectAnswer: flights
  AnswerTests: omnitest(correctExpr='flights')
  Hint: "Type flights."

- Class: cmd_question
  Output: "Instead of specifying the columns we want to keep, we can specify the columns we want to omit. To see how this works, do select(flights, -carrier) to omit the carrier column."
  CorrectAnswer: select(flights, -carrier)
  AnswerTests: omnitest(correctExpr='select(flights, -carrier)')
  Hint: "Use select(flights, -carrier) to remove the carrier column."

- Class: text
  Output: "Now that you know how to select a subset of columns using select(), a natural next question is: How do I select a subset of rows? That's where the filter() function comes in."

- Class: cmd_question
  Output: "Use filter(flights, origin == \"JFK\") to select all rows where the plane is taking off from JFK airport. Use two equals signs side-by-side."
  CorrectAnswer: filter(flights, origin == "JFK")
  AnswerTests: omnitest(correctExpr='filter(flights, origin == "JFK")')
  Hint: "filter(flights, origin == \"JFK\") returns only rows where origin equals JFK."

- Class: text
  Output: "Again, note that filter() recognizes origin as a column of flights, without you having to explicitly specify flights$origin."

- Class: text
  Output: "The == operator asks whether the thing on the left is equal to the thing on the right. If yes, it returns TRUE; otherwise FALSE. In this case, origin is an entire vector (column) of values, so origin == \"JFK\" returns a vector of TRUEs and FALSEs. filter() then returns only the rows of flights corresponding to the TRUEs."

- Class: cmd_question
  Output: "You can specify multiple conditions separated by commas. For example, filter(flights, month == 1, origin == \"JFK\") returns all flights from JFK in January. Try it."
  CorrectAnswer: filter(flights, month == 1, origin == "JFK")
  AnswerTests: any_of_exprs('filter(flights, month == 1, origin == "JFK")', 'filter(flights, origin == "JFK", month == 1)')
  Hint: "Try filter(flights, month == 1, origin == \"JFK\")."

- Class: cmd_question
  Output: "The conditions passed to filter() can use any of the standard comparison operators. Pull up the relevant documentation with ?Comparison (uppercase C)."
  CorrectAnswer: ?Comparison
  AnswerTests: omnitest(correctExpr='?Comparison')
  Hint: "?Comparison opens the help for comparison operators."

- Class: cmd_question
  Output: "Edit your previous call to filter() to instead return rows corresponding to flights from La Guardia airport (LGA) taking place in August. The up arrow on your keyboard may come in handy. Don't forget your double quotes."
  CorrectAnswer: filter(flights, month == 8, origin == "LGA")
  AnswerTests: any_of_exprs('filter(flights, month == 8, origin == "LGA")', 'filter(flights, origin == "LGA", month == 8)')
  Hint: "Try filter(flights, month == 8, origin == \"LGA\")."

- Class: cmd_question
  Output: "Our last two calls to filter() requested rows where condition AND another condition were TRUE. We can also request rows where EITHER one OR another condition is TRUE. For example, filter(flights, carrier == \"AA\" | carrier == \"UA\") gives all rows where the carrier is American Airlines or United Airlines. Try it."
  CorrectAnswer: filter(flights, carrier == "AA" | carrier == "UA")
  AnswerTests: omnitest(correctExpr='filter(flights, carrier == "AA" | carrier == "UA")')
  Hint: "Use filter(flights, carrier == \"AA\" | carrier == \"UA\"). The | symbol is the logical OR."

- Class: cmd_question
  Output: "Now, use filter() to fetch all rows for which the departure delay is strictly greater than (>) 60 minutes."
  CorrectAnswer: filter(flights, dep_delay > 60)
  AnswerTests: omnitest(correctExpr='filter(flights, dep_delay > 60)')
  Hint: "Try filter(flights, dep_delay > 60)."

- Class: text
  Output: "We've seen how to select a subset of columns and rows from our dataset using select() and filter(), respectively. Inherent in select() was also the ability to arrange our selected columns in any order we please."

- Class: text
  Output: "Sometimes we want to order the rows of a dataset according to the values of a particular variable. This is the job of arrange()."

- Class: cmd_question
  Output: "To see how arrange() works, let's first take a subset of flights. Use select() to get all columns from month through dep_delay and store the result in flights2."
  CorrectAnswer: flights2 <- select(flights, month:dep_delay)
  AnswerTests: omnitest('flights2 <- select(flights, month:dep_delay)')
  Hint: "Use select(flights, month:dep_delay) and assign to flights2."

- Class: cmd_question
  Output: "Now order the rows of flights2 so that dep_delay is in ascending order (from small to large). Type arrange(flights2, dep_delay)."
  CorrectAnswer: arrange(flights2, dep_delay)
  AnswerTests: omnitest('arrange(flights2, dep_delay)')
  Hint: "arrange(flights2, dep_delay) orders from smallest delay to largest delay."

- Class: text
  Output: "Who ever heard of a plane leaving more than half an hour early?"

- Class: cmd_question
  Output: "To do the same, but in descending order, change the second argument to desc(dep_delay)."
  CorrectAnswer: arrange(flights2, desc(dep_delay))
  AnswerTests: omnitest('arrange(flights2, desc(dep_delay))')
  Hint: "arrange(flights2, desc(dep_delay)) orders from largest delay to smallest delay."

- Class: cmd_question
  Output: "We can also arrange the data according to the values of multiple variables. For example, arrange(flights2, month, desc(dep_delay)) first arranges by month, then by delay (descending). Try it."
  CorrectAnswer: arrange(flights2, month, desc(dep_delay))
  AnswerTests: omnitest('arrange(flights2, month, desc(dep_delay))')
  Hint: "Try arrange(flights2, month, desc(dep_delay))."

- Class: text
  Output: "It's common to create a new variable based on the value of one or more variables already in a dataset. The mutate() function does exactly this."

- Class: cmd_question
  Output: "Select year, month, day, carrier, and flight (in that order) from the original flights dataset, and put them in a new data frame called flights3."
  CorrectAnswer: flights3 <- select(flights, year, month, day, carrier, flight)
  AnswerTests: omnitest('flights3 <- select(flights, year, month, day, carrier, flight)')
  Hint: "Try flights3 <- select(flights, year, month, day, carrier, flight)."

- Class: text
  Output: "Often, flight codes combine the carrier prefix with the flight number. Rather than two columns, we can combine into one string."

- Class: cmd_question
  Output: "You can use paste0() to combine vectors together. The 0 in paste0 means no separator, unlike paste() which defaults to a space. Try paste0(c(\"A\", \"B\", \"C\"), 1:3)."
  CorrectAnswer: paste0(c("A", "B", "C"), 1:3)
  AnswerTests: omnitest('paste0(c("A", "B", "C"), 1:3)')
  Hint: "Type paste0(c(\"A\", \"B\", \"C\"), 1:3)."

- Class: cmd_question
  Output: "Now view flights3 so you can see the two columns you will combine."
  CorrectAnswer: flights3
  AnswerTests: omnitest('flights3')
  Hint: "Type flights3."

- Class: cmd_question
  Output: "Make a new column using mutate(). Call it FlightNumber and set it equal to paste0(carrier, flight)."
  CorrectAnswer: mutate(flights3, FlightNumber = paste0(carrier, flight))
  AnswerTests: omnitest('mutate(flights3, FlightNumber = paste0(carrier, flight))')
  Hint: "Use mutate(flights3, FlightNumber = paste0(carrier, flight))."

- Class: text
  Output: "Now let's compute summary statistics by groups."

- Class: text
  Output: "Using dplyr in R, you do this by first grouping data with group_by(), then summarising over groups with summarise()."

- Class: text
  Output: "Let's use this to work out the average delay for each carrier in 2013."

- Class: text
  Output: "To do this neatly, we will use chaining with the %>% operator. When you use chaining, you start by typing the dataset name, then %>%, then the dplyr verb (without repeating the dataset as the first argument)."

- Class: text
  Output: "For example, filter(flights, dep_delay > 60) is the same as flights %>% filter(dep_delay > 60)."

- Class: text
  Output: "You can also build longer chains like flights %>% filter(dep_delay > 60) %>% arrange(month, desc(dep_delay)) %>% select(month, day, dep_delay, carrier). This filters, orders by month and delay, and keeps only the listed columns."

- Class: text
  Output: "When you use group_by(), you generally use it as part of a chain."

- Class: cmd_question
  Output: "Take the flights dataset, group it by carrier, and calculate the mean departure delay. Chain with %>%. Use mean_delay = mean(dep_delay, na.rm = TRUE) inside summarise()."
  CorrectAnswer: flights %>% group_by(carrier) %>% summarise(mean_delay = mean(dep_delay, na.rm = TRUE))
  AnswerTests: omnitest('flights %>% group_by(carrier) %>% summarise(mean_delay = mean(dep_delay, na.rm = TRUE))')
  Hint: "Use flights %>% group_by(carrier) %>% summarise(mean_delay = mean(dep_delay, na.rm = TRUE))."

- Class: text
  Output: "Great. Summarisation is a powerful tool we will practise more as we go forward."

- Class: figure
  Output: "This lesson is complete. Before leaving, generate your completion code with your UCL student number and post it in Moodle."
  Figure: finalcode.R
  FigureType: new

- Class: cmd_question
  Output: "Type completioncode(YOUR_8_DIGIT_NUMBER). Example: completioncode(12345678)."
  CorrectAnswer: completioncode(12345678)
  AnswerTests: expr_uses_func("completioncode")
  Hint: "Replace 12345678 with your own 8-digit student number, for example completioncode(XXXXXXXX)."

- Class: text
  Output: "Copy your code and paste it in Moodle under 'Pre-session 6'."

- Class: text
  Output: "If Moodle asks for a screenshot, include the console line showing completioncode(YOURNUMBER) and the printed code."

- Class: text
  Output: "Saving and exiting: type bye() to exit and save your progress. To return to the main menu (without exiting R), type main(). You can experiment with play() and resume with nxt(). Your code remains valid once generated."
